// Code generated by protoc-gen-go.
// source: allinone.proto
// DO NOT EDIT!

/*
Package allinone is a generated protocol buffer package.

It is generated from these files:
	allinone.proto

It has these top-level messages:
	Point
	Rect
*/
package allinone

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type Point struct {
	A int32 `protobuf:"varint,1,opt,name=a" json:"a,omitempty"`
	B int32 `protobuf:"varint,2,opt,name=b" json:"b,omitempty"`
}

func (m *Point) Reset()                    { *m = Point{} }
func (m *Point) String() string            { return proto.CompactTextString(m) }
func (*Point) ProtoMessage()               {}
func (*Point) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *Point) GetA() int32 {
	if m != nil {
		return m.A
	}
	return 0
}

func (m *Point) GetB() int32 {
	if m != nil {
		return m.B
	}
	return 0
}

type Rect struct {
	A *Point `protobuf:"bytes,1,opt,name=a" json:"a,omitempty"`
	B *Point `protobuf:"bytes,2,opt,name=b" json:"b,omitempty"`
}

func (m *Rect) Reset()                    { *m = Rect{} }
func (m *Rect) String() string            { return proto.CompactTextString(m) }
func (*Rect) ProtoMessage()               {}
func (*Rect) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *Rect) GetA() *Point {
	if m != nil {
		return m.A
	}
	return nil
}

func (m *Rect) GetB() *Point {
	if m != nil {
		return m.B
	}
	return nil
}

func init() {
	proto.RegisterType((*Point)(nil), "allinone.Point")
	proto.RegisterType((*Rect)(nil), "allinone.Rect")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for Allinone service

type AllinoneClient interface {
	SendmanytoClient(ctx context.Context, in *Point, opts ...grpc.CallOption) (Allinone_SendmanytoClientClient, error)
	SendmanytoServer(ctx context.Context, opts ...grpc.CallOption) (Allinone_SendmanytoServerClient, error)
	SendonetoClient(ctx context.Context, in *Point, opts ...grpc.CallOption) (*Point, error)
	SendonetoServer(ctx context.Context, in *Point, opts ...grpc.CallOption) (*Point, error)
}

type allinoneClient struct {
	cc *grpc.ClientConn
}

func NewAllinoneClient(cc *grpc.ClientConn) AllinoneClient {
	return &allinoneClient{cc}
}

func (c *allinoneClient) SendmanytoClient(ctx context.Context, in *Point, opts ...grpc.CallOption) (Allinone_SendmanytoClientClient, error) {
	stream, err := grpc.NewClientStream(ctx, &_Allinone_serviceDesc.Streams[0], c.cc, "/allinone.allinone/SendmanytoClient", opts...)
	if err != nil {
		return nil, err
	}
	x := &allinoneSendmanytoClientClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Allinone_SendmanytoClientClient interface {
	Recv() (*Rect, error)
	grpc.ClientStream
}

type allinoneSendmanytoClientClient struct {
	grpc.ClientStream
}

func (x *allinoneSendmanytoClientClient) Recv() (*Rect, error) {
	m := new(Rect)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *allinoneClient) SendmanytoServer(ctx context.Context, opts ...grpc.CallOption) (Allinone_SendmanytoServerClient, error) {
	stream, err := grpc.NewClientStream(ctx, &_Allinone_serviceDesc.Streams[1], c.cc, "/allinone.allinone/SendmanytoServer", opts...)
	if err != nil {
		return nil, err
	}
	x := &allinoneSendmanytoServerClient{stream}
	return x, nil
}

type Allinone_SendmanytoServerClient interface {
	Send(*Rect) error
	CloseAndRecv() (*Point, error)
	grpc.ClientStream
}

type allinoneSendmanytoServerClient struct {
	grpc.ClientStream
}

func (x *allinoneSendmanytoServerClient) Send(m *Rect) error {
	return x.ClientStream.SendMsg(m)
}

func (x *allinoneSendmanytoServerClient) CloseAndRecv() (*Point, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(Point)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *allinoneClient) SendonetoClient(ctx context.Context, in *Point, opts ...grpc.CallOption) (*Point, error) {
	out := new(Point)
	err := grpc.Invoke(ctx, "/allinone.allinone/SendonetoClient", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *allinoneClient) SendonetoServer(ctx context.Context, in *Point, opts ...grpc.CallOption) (*Point, error) {
	out := new(Point)
	err := grpc.Invoke(ctx, "/allinone.allinone/SendonetoServer", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for Allinone service

type AllinoneServer interface {
	SendmanytoClient(*Point, Allinone_SendmanytoClientServer) error
	SendmanytoServer(Allinone_SendmanytoServerServer) error
	SendonetoClient(context.Context, *Point) (*Point, error)
	SendonetoServer(context.Context, *Point) (*Point, error)
}

func RegisterAllinoneServer(s *grpc.Server, srv AllinoneServer) {
	s.RegisterService(&_Allinone_serviceDesc, srv)
}

func _Allinone_SendmanytoClient_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(Point)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(AllinoneServer).SendmanytoClient(m, &allinoneSendmanytoClientServer{stream})
}

type Allinone_SendmanytoClientServer interface {
	Send(*Rect) error
	grpc.ServerStream
}

type allinoneSendmanytoClientServer struct {
	grpc.ServerStream
}

func (x *allinoneSendmanytoClientServer) Send(m *Rect) error {
	return x.ServerStream.SendMsg(m)
}

func _Allinone_SendmanytoServer_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(AllinoneServer).SendmanytoServer(&allinoneSendmanytoServerServer{stream})
}

type Allinone_SendmanytoServerServer interface {
	SendAndClose(*Point) error
	Recv() (*Rect, error)
	grpc.ServerStream
}

type allinoneSendmanytoServerServer struct {
	grpc.ServerStream
}

func (x *allinoneSendmanytoServerServer) SendAndClose(m *Point) error {
	return x.ServerStream.SendMsg(m)
}

func (x *allinoneSendmanytoServerServer) Recv() (*Rect, error) {
	m := new(Rect)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _Allinone_SendonetoClient_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Point)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AllinoneServer).SendonetoClient(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/allinone.allinone/SendonetoClient",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AllinoneServer).SendonetoClient(ctx, req.(*Point))
	}
	return interceptor(ctx, in, info, handler)
}

func _Allinone_SendonetoServer_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Point)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AllinoneServer).SendonetoServer(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/allinone.allinone/SendonetoServer",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AllinoneServer).SendonetoServer(ctx, req.(*Point))
	}
	return interceptor(ctx, in, info, handler)
}

var _Allinone_serviceDesc = grpc.ServiceDesc{
	ServiceName: "allinone.allinone",
	HandlerType: (*AllinoneServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "SendonetoClient",
			Handler:    _Allinone_SendonetoClient_Handler,
		},
		{
			MethodName: "SendonetoServer",
			Handler:    _Allinone_SendonetoServer_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "SendmanytoClient",
			Handler:       _Allinone_SendmanytoClient_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "SendmanytoServer",
			Handler:       _Allinone_SendmanytoServer_Handler,
			ClientStreams: true,
		},
	},
	Metadata: "allinone.proto",
}

func init() { proto.RegisterFile("allinone.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 212 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x09, 0x6e, 0x88, 0x02, 0xff, 0xe2, 0xe2, 0x4b, 0xcc, 0xc9, 0xc9,
	0xcc, 0xcb, 0xcf, 0x4b, 0xd5, 0x2b, 0x28, 0xca, 0x2f, 0xc9, 0x17, 0xe2, 0x80, 0xf1, 0x95, 0x94,
	0xb9, 0x58, 0x03, 0xf2, 0x33, 0xf3, 0x4a, 0x84, 0x78, 0xb8, 0x18, 0x13, 0x25, 0x18, 0x15, 0x18,
	0x35, 0x58, 0x83, 0x18, 0x13, 0x41, 0xbc, 0x24, 0x09, 0x26, 0x08, 0x2f, 0x49, 0xc9, 0x85, 0x8b,
	0x25, 0x28, 0x35, 0xb9, 0x44, 0x48, 0x16, 0xa6, 0x86, 0xdb, 0x88, 0x5f, 0x0f, 0x6e, 0x24, 0x58,
	0x3f, 0x48, 0x93, 0x2c, 0x4c, 0x13, 0x36, 0xe9, 0x24, 0xa3, 0x57, 0x8c, 0x5c, 0x70, 0x7b, 0x85,
	0xcc, 0xb9, 0x04, 0x82, 0x53, 0xf3, 0x52, 0x72, 0x13, 0xf3, 0x2a, 0x4b, 0xf2, 0x9d, 0x73, 0x32,
	0x53, 0xf3, 0x4a, 0x84, 0xd0, 0x35, 0x49, 0xf1, 0x21, 0x04, 0x40, 0xf6, 0x2b, 0x31, 0x18, 0x30,
	0xa2, 0x6a, 0x0c, 0x4e, 0x2d, 0x2a, 0x4b, 0x2d, 0x12, 0x42, 0x53, 0x27, 0x85, 0x6e, 0x90, 0x12,
	0x83, 0x06, 0xa3, 0x90, 0x29, 0x17, 0x3f, 0x48, 0x63, 0x7e, 0x5e, 0x2a, 0x6e, 0x0b, 0x31, 0x35,
	0xa2, 0x68, 0x83, 0x5a, 0x47, 0x84, 0x36, 0x27, 0x75, 0x84, 0x5f, 0x9d, 0x24, 0x33, 0xf3, 0xf5,
	0xd2, 0x8b, 0x0a, 0x92, 0xf5, 0x52, 0x2b, 0x12, 0x73, 0x0b, 0x72, 0x52, 0x8b, 0xe1, 0xca, 0x03,
	0x18, 0x93, 0xd8, 0xc0, 0x31, 0x62, 0x0c, 0x08, 0x00, 0x00, 0xff, 0xff, 0x1d, 0x97, 0x80, 0x65,
	0xa3, 0x01, 0x00, 0x00,
}
