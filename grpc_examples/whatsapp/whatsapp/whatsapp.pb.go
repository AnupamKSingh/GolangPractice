// Code generated by protoc-gen-go.
// source: whatsapp.proto
// DO NOT EDIT!

/*
Package whatsapp is a generated protocol buffer package.

It is generated from these files:
	whatsapp.proto

It has these top-level messages:
	Message
*/
package whatsapp

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type Message struct {
	Chat string `protobuf:"bytes,1,opt,name=chat" json:"chat,omitempty"`
}

func (m *Message) Reset()                    { *m = Message{} }
func (m *Message) String() string            { return proto.CompactTextString(m) }
func (*Message) ProtoMessage()               {}
func (*Message) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *Message) GetChat() string {
	if m != nil {
		return m.Chat
	}
	return ""
}

func init() {
	proto.RegisterType((*Message)(nil), "whatsapp.Message")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for Whatsapp service

type WhatsappClient interface {
	Chat(ctx context.Context, opts ...grpc.CallOption) (Whatsapp_ChatClient, error)
}

type whatsappClient struct {
	cc *grpc.ClientConn
}

func NewWhatsappClient(cc *grpc.ClientConn) WhatsappClient {
	return &whatsappClient{cc}
}

func (c *whatsappClient) Chat(ctx context.Context, opts ...grpc.CallOption) (Whatsapp_ChatClient, error) {
	stream, err := grpc.NewClientStream(ctx, &_Whatsapp_serviceDesc.Streams[0], c.cc, "/whatsapp.whatsapp/Chat", opts...)
	if err != nil {
		return nil, err
	}
	x := &whatsappChatClient{stream}
	return x, nil
}

type Whatsapp_ChatClient interface {
	Send(*Message) error
	Recv() (*Message, error)
	grpc.ClientStream
}

type whatsappChatClient struct {
	grpc.ClientStream
}

func (x *whatsappChatClient) Send(m *Message) error {
	return x.ClientStream.SendMsg(m)
}

func (x *whatsappChatClient) Recv() (*Message, error) {
	m := new(Message)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// Server API for Whatsapp service

type WhatsappServer interface {
	Chat(Whatsapp_ChatServer) error
}

func RegisterWhatsappServer(s *grpc.Server, srv WhatsappServer) {
	s.RegisterService(&_Whatsapp_serviceDesc, srv)
}

func _Whatsapp_Chat_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(WhatsappServer).Chat(&whatsappChatServer{stream})
}

type Whatsapp_ChatServer interface {
	Send(*Message) error
	Recv() (*Message, error)
	grpc.ServerStream
}

type whatsappChatServer struct {
	grpc.ServerStream
}

func (x *whatsappChatServer) Send(m *Message) error {
	return x.ServerStream.SendMsg(m)
}

func (x *whatsappChatServer) Recv() (*Message, error) {
	m := new(Message)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

var _Whatsapp_serviceDesc = grpc.ServiceDesc{
	ServiceName: "whatsapp.whatsapp",
	HandlerType: (*WhatsappServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Chat",
			Handler:       _Whatsapp_Chat_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "whatsapp.proto",
}

func init() { proto.RegisterFile("whatsapp.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 132 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0xe2, 0x2b, 0xcf, 0x48, 0x2c,
	0x29, 0x4e, 0x2c, 0x28, 0xd0, 0x2b, 0x28, 0xca, 0x2f, 0xc9, 0x17, 0xe2, 0x80, 0xf1, 0x95, 0x64,
	0xb9, 0xd8, 0x7d, 0x53, 0x8b, 0x8b, 0x13, 0xd3, 0x53, 0x85, 0x84, 0xb8, 0x58, 0x92, 0x33, 0x12,
	0x4b, 0x24, 0x18, 0x15, 0x18, 0x35, 0x38, 0x83, 0xc0, 0x6c, 0x23, 0x3b, 0x2e, 0xb8, 0x52, 0x21,
	0x23, 0x2e, 0x16, 0xe7, 0x8c, 0xc4, 0x12, 0x21, 0x41, 0x3d, 0xb8, 0x69, 0x50, 0xad, 0x52, 0x98,
	0x42, 0x4a, 0x0c, 0x1a, 0x8c, 0x06, 0x8c, 0x4e, 0xea, 0x08, 0xfd, 0x4e, 0x92, 0x99, 0xf9, 0x7a,
	0xe9, 0x45, 0x05, 0xc9, 0x7a, 0xa9, 0x15, 0x89, 0xb9, 0x05, 0x39, 0xa9, 0xc5, 0x70, 0x4d, 0x01,
	0x8c, 0x49, 0x6c, 0x60, 0x87, 0x19, 0x03, 0x02, 0x00, 0x00, 0xff, 0xff, 0x98, 0x9f, 0x21, 0xbf,
	0xaa, 0x00, 0x00, 0x00,
}
